<!DOCTYPE html>
<html lang="en">
<head>
    <title>Studio Chocolate Hybrid Gifting</title>
    <link rel="stylesheet" href="css/chocolate.css">
    <link rel="icon" type="image/webp" href="images/choclogo.webp"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
<img src="images/choclogo.webp" class="logo" alt="Studio Chocolate Logo">
<div style="max-width: 500px; padding-top: 16px;">
    What is a hybrid gift, you say?
    <hr/>
    It's a way to create a whole experience around eating those delicious bonbons when you can't be with your gift
    receiver in person.
    <hr/>
    Add music, video, audio, links, an extra little message... whatever you think will set the right tone.
    <hr/>
    You don't need to register with your name or email address. Just enter your order number (on your confirmation
    page and confirmation email) and create a password so that you can come back and add to your gift later if you want
    to.
</div>

<div style="display: flex">
    <a href="#" id="createTab" class="tab <%= login ? 'tabSelect' : '' %>">Create a Gift</a>
    <a href="#" id="loginTab" class="tab <%= login ? '' : 'tabSelect' %>">Login to an Existing Gift</a>
</div>

<form id="create" action="create" method="post" <%= login ? 'style=display:none' : '' %>>
    <div class="list">
        <label for="createOrder">Order Number</label>
        <input id="createOrder" class="field" type="number" name="order" required min="10000 " max="30000" pattern="[0-9]+"
               value="<%= order %>">
        <label for="createPass">Password</label>
        <input id="createPass" class="field" type="password" name="password" minlength="6" required>
        <label for="createConfirm">Confirm Password</label>
        <input id="createConfirm" class="field" type="password" name="confirm" minlength="6" required>
        <div id="createError" class="error"><%= login ? error : '' %></div>
        <input id="createSubmit" type="submit" value="Get Started" class="field" disabled>
    </div>
</form>

<form id="login" action="login" method="post" <%= login ? '' : 'style=display:none' %>>
    <div class="list">
        <label for="loginOrder">Order Number</label>
        <input id="loginOrder" class="field" type="number" name="order" required min="1" pattern="[0-9]+"
               value="<%= order %>">
        <label for="loginPass">Password</label>
        <input id="loginPass" class="field" type="password" name="password" minlength="6" required>
        <div id="loginError" class="error"><%= login ? error : '' %></div>
        <input id="loginSubmit" type="submit" value="Login" class="field" disabled>
    </div>
</form>

<a href="faq.html" style="padding: 8px 16px; font-size: x-small">FAQs</a>

<script>
	const createForm = document.getElementById('create')

	function validateCreate() {
		const inputs = createForm.getElementsByTagName('input')
		const inputArray = Array.prototype.slice.call(inputs);
		let valid = true;
		let error = null;
		if (!checkCookie()) {
			error = 'Please enable cookies';
			valid = false;
		}
		inputArray.forEach((item) => {
			valid = valid && item.validity.valid;
			if (item !== document.activeElement && item.classList.contains('validate')) {
				error = error || item.validationMessage;
			}
		});

		document.getElementById('createSubmit').disabled = !valid;
		document.getElementById('createError').innerText = error;
		return valid;
	}

	createForm.addEventListener('submit', (event) => {
		let valid = validateCreate();
		if (!valid) {
			event.preventDefault();
		}
	});

	const inputs = createForm.getElementsByTagName('input')
	const inputArray = Array.prototype.slice.call(inputs);
	inputArray.forEach((item) => {
		item.addEventListener('blur', () => {
			item.classList.add('validate');
			validateCreate();
		});

		item.addEventListener('input', () => {
			validateCreate();
		});
	});

	document.getElementById('loginTab').addEventListener('click', () => {
		document.getElementById('create').style.display = 'none';
		document.getElementById('login').style.display = 'block';
		document.getElementById('loginTab').classList.remove('tabSelect');
		document.getElementById('createTab').classList.add('tabSelect');
	});

	document.getElementById('createTab').addEventListener('click', () => {
		document.getElementById('create').style.display = 'block';
		document.getElementById('login').style.display = 'none';
		document.getElementById('loginTab').classList.add('tabSelect');
		document.getElementById('createTab').classList.remove('tabSelect');
	});

	const createPass = document.getElementById('createPass');
	const createConfirm = document.getElementById('createConfirm');
	createConfirm.addEventListener('input', () => {
		createConfirm.setCustomValidity('');
	});

	createConfirm.addEventListener('blur', () => {
		if (createPass.value !== createConfirm.value) {
			createConfirm.setCustomValidity('Passwords must match.')
		}
	});

	const loginForm = document.getElementById('login')

	function validateLogin() {
		const inputs = loginForm.getElementsByTagName('input')
		const inputArray = Array.prototype.slice.call(inputs);
		let valid = true;
		let error = null;
		if (!checkCookie()) {
			error = 'Please enable cookies';
			valid = false;
		}
		inputArray.forEach((item) => {
			valid = valid && item.validity.valid;
			if (item !== document.activeElement && item.classList.contains('validate')) {
				error = error || item.validationMessage;
			}
		});

		document.getElementById('loginSubmit').disabled = !valid;
		document.getElementById('loginError').innerText = error;
		return valid;
	}

	loginForm.addEventListener('submit', (event) => {
		let valid = validateLogin();
		if (!valid) {
			event.preventDefault();
		}
	});

	const loginInputs = loginForm.getElementsByTagName('input')
	const loginArray = Array.prototype.slice.call(loginInputs);
	loginArray.forEach((item) => {
		item.addEventListener('blur', () => {
			item.classList.add('validate');
			validateLogin();
		});

		item.addEventListener('input', () => {
			validateLogin();
		});
	});

	function checkCookie() {
		// Quick test if browser has cookieEnabled host property
		if (navigator.cookieEnabled) return true;
		// Create cookie
		document.cookie = "cookietest=1";
		const ret = document.cookie.indexOf("cookietest=") != -1;
		// Delete cookie
		document.cookie = "cookietest=1; expires=Thu, 01-Jan-1970 00:00:01 GMT";
		return ret;
	}

	if (!checkCookie()) {
		document.getElementById('loginError').innerText = 'Please enable cookies';
		document.getElementById('createError').innerText = 'Please enable cookies';
	}
</script>
</body>
</html>