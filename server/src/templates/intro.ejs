<!DOCTYPE html>
<html lang="en">
<head>
    <title></title>
    <link rel="stylesheet" href="css/chocolate.css">
    <link rel="icon" type="image/webp" href="images/choclogo.webp"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
<img src="images/choclogo.webp" class="logo">
<div style="max-width: 400px; padding-top: 16px;">Welcome. Make your gift into a hybrid gift by adding some personal
    digital content to it. Enter your order number and a password to get started, or
    <a href="#" id="loginLink">login</a> to edit an existing gift.
</div>

<form id="create" action="create" method="post" <%= login === true ? 'style=display:none' : '' %>>
    <div class="list">
        <label for="createOrder">Order Number</label>
        <input id="createOrder" class="field" type="number" name="order" required min="1" pattern="[0-9]+"
               value="<%= order %>">
        <label for="createPass">Password</label>
        <input id="createPass" class="field" type="password" name="password" minlength="6" required>
        <label for="createConfirm">Confirm Password</label>
        <input id="createConfirm" class="field" type="password" name="confirm" minlength="6" required>
        <div id="createError" class="error"><%= login !== true ? error : '' %></div>
        <input id="createSubmit" type="submit" value="Create" class="field" disabled>
    </div>
</form>

<form id="login" action="login" method="post" <%= login !== true ? 'style=display:none' : '' %>>
    <div class="list">
        <label for="loginOrder">Order Number</label>
        <input id="loginOrder" class="field" type="number" name="order" required min="1" pattern="[0-9]+"
               value="<%= order %>">
        <label for="loginPass">Password</label>
        <input id="loginPass" class="field" type="password" name="password" minlength="6" required>
        <div id="loginError" class="error"><%= login === true ? error : '' %></div>
        <input id="loginSubmit" type="submit" value="Login" class="field" disabled>
    </div>
</form>

<script>
	const createForm = document.getElementById('create')

	function validateCreate() {
		const inputs = createForm.getElementsByTagName('input')
		const inputArray = Array.prototype.slice.call(inputs);
		let valid = true;
		let error = null;
		inputArray.forEach((item) => {
			valid = valid && item.validity.valid;
			if (item !== document.activeElement && item.classList.contains('validate')) {
				error = error || item.validationMessage;
			}
		});

		document.getElementById('createSubmit').disabled = !valid;
		document.getElementById('createError').innerText = error;
		return valid;
	}

	createForm.addEventListener('submit', (event) => {
		let valid = validateCreate();
		if (!valid) {
			event.preventDefault();
		}
	});

	const inputs = createForm.getElementsByTagName('input')
	const inputArray = Array.prototype.slice.call(inputs);
	inputArray.forEach((item) => {
		item.addEventListener('blur', () => {
			item.classList.add('validate');
			validateCreate();
		});

		item.addEventListener('input', () => {
			validateCreate();
		});
	});

	document.getElementById('loginLink').addEventListener('click', () => {
		if(createForm.style.display === 'none') {
			document.getElementById('create').style.display = 'block';
			document.getElementById('login').style.display = 'none';
		} else {
			document.getElementById('create').style.display = 'none';
			document.getElementById('login').style.display = 'block';
        }
	});

	const createPass = document.getElementById('createPass');
	const createConfirm = document.getElementById('createConfirm');
	createConfirm.addEventListener('input', () => {
		createConfirm.setCustomValidity('');
	});

	createConfirm.addEventListener('blur', () => {
		if (createPass.value !== createConfirm.value) {
			createConfirm.setCustomValidity('Passwords must match.')
		}
	});

	const loginForm = document.getElementById('login')

	function validateLogin() {
		const inputs = loginForm.getElementsByTagName('input')
		const inputArray = Array.prototype.slice.call(inputs);
		let valid = true;
		let error = null;
		inputArray.forEach((item) => {
			valid = valid && item.validity.valid;
			if (item !== document.activeElement && item.classList.contains('validate')) {
				error = error || item.validationMessage;
			}
		});

		document.getElementById('loginSubmit').disabled = !valid;
		document.getElementById('loginError').innerText = error;
		return valid;
	}

	createForm.addEventListener('submit', (event) => {
		let valid = validateCreate();
		if (!valid) {
			event.preventDefault();
		}
	});

	const loginInputs = loginForm.getElementsByTagName('input')
	const loginArray = Array.prototype.slice.call(loginInputs);
	loginArray.forEach((item) => {
		item.addEventListener('blur', () => {
			item.classList.add('validate');
			validateLogin();
		});

		item.addEventListener('input', () => {
			validateLogin();
		});
	});
</script>
</body>
</html>